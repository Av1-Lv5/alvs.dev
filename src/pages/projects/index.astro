---
import { getEntry } from "astro:content";

// layout
import PageLayout from "@layouts/PageLayout.astro";

// components
import ProjectCard from "@components/ProjectCard.astro";

// data
const tags = ["All", "React", "Typescript", "Next", "Astro"];

// fetching projects to display
const fetchedProjects = [];

fetchedProjects[0] = await getEntry("projects", "audiophile");
fetchedProjects[1] = await getEntry("projects", "photosnap");
fetchedProjects[2] = await getEntry("projects", "markdown-editor");
fetchedProjects[3] = await getEntry("projects", "tic-tac-toe");
---

<PageLayout tabTitle="Projects" title="Things I've built">
	<div id="tags-container">
		{
			tags.map((tag) => (
				<span class={`tag ${tag === "All" && "selected"}`}>{tag}</span>
			))
		}
	</div>
	<p id="result-msg" class="hide"></p>
	{
		fetchedProjects.map((project) => {
			return <ProjectCard project={project} />;
		})
	}
	<!-- <a
		id="centered-link"
		href="https://github.com/Av1-Lv5/Frontendmentor-challenges"
		>Frontendmentor challenges Completed</a
	> -->
</PageLayout>

<style>
	.hide {
		display: none;
	}
	#result-msg {
		color: var(--text-light);
		font-size: 1rem;
		font-style: italic;
	}
	#centered-link {
		display: block;
		text-align: center;
		margin-top: 3rem;
		text-transform: uppercase;
		color: var(--accent);
		font-weight: 500;
		text-decoration: underline;
	}
	#result-msg :global(#built-with),
	#result-msg :global(#projects-count) {
		font-weight: bold;
		text-decoration: underline;
		color: var(--accent);
		opacity: 0.7;
	}
	#tags-container {
		padding: 1rem 0;
		position: sticky;
		top: 0;
		display: flex;
		overflow-x: scroll;
		gap: 15px;
		z-index: 1;
		background-color: var(--bg);
		border-bottom: 1px dashed var(--border);
	}
	#tags-container .tag {
		border: 1px solid var(--border);
		cursor: pointer;
		border-radius: 10px;
		padding: 5px 15px;
	}
	#tags-container .tag.selected,
	#tags-container .tag:hover {
		border-color: var(--accent);
		color: var(--accent);
	}
</style>

<script>
	// SELECTORS
	const tagFilterEls = document.querySelectorAll("#tags-container .tag");
	const allProjectCardEls = document.querySelectorAll(".project-card");

	// Variables
	let projectsHiddenCount = 0;

	// Event listners
	tagFilterEls.forEach((tagEl) => {
		tagEl.addEventListener("click", (e) => {
			const target = e.target as HTMLElement;

			filterProjects(target.innerText);
			updateSelectedTag(target, tagFilterEls);
			updateResultMsg(target.innerText);
			scrollBackToTags();
		});
	});

	// FUNCTIONS
	function updateSelectedTag(
		selectedTagEl: HTMLElement,
		allTagEl: NodeListOf<Element>
	): void {
		allTagEl.forEach((tagEl) => {
			if (tagEl === selectedTagEl) tagEl.classList.add("selected");
			else if (tagEl.classList.contains("selected"))
				tagEl.classList.remove("selected");
		});
	}

	function filterProjects(filter: string): void {
		filter = filter.toLowerCase();
		projectsHiddenCount = 0;

		allProjectCardEls.forEach((projectCard) => {
			const tagsOnCard = projectCard
				.getAttribute("tags")
				?.toLowerCase()
				.split(" ");

			if (filter === "all" || tagsOnCard?.includes(filter)) {
				projectCard.classList.remove("hide");
			} else {
				projectCard.classList.add("hide");
				projectsHiddenCount++;
			}
		});
	}

	function updateResultMsg(filter: string) {
		// SELECTORS
		const resultMsgEl = document.querySelector(
			"#result-msg"
		) as HTMLParagraphElement;

		// VARIABLES
		const projectsCount = allProjectCardEls.length;

		if (filter !== "All") {
			resultMsgEl.classList.remove("hide");
			resultMsgEl.innerHTML = `"Showing <span id="projects-count">${
				projectsCount - projectsHiddenCount
			}</span> results for projects built with <span id="built-with"
            >${filter}</span>"`;
		} else {
			resultMsgEl.innerHTML = `"Showing <span id="projects-count">${projectsCount}</span> results for <span id="built-with"
            >${filter}</span> projects"`;
		}
	}

	function scrollBackToTags() {
		// document
		// 	.getElementById("result-msg")
		// 	?.scrollIntoView({ behavior: "smooth", block: "center" });
	}
</script>
